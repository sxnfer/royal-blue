DROP DATABASE IF EXISTS totesys_db;
CREATE DATABASE totesys_db;

-- Connect to the newly created database
\c totesys_db

CREATE TABLE "department" (
  "department_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "department_name" varchar NOT NULL,
  "location" varchar,
  "manager" varchar,
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp)
);

CREATE TABLE "address" (
  "address_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "address_line_1" varchar NOT NULL,
  "address_line_2" varchar,
  "district" varchar,
  "city" varchar NOT NULL,
  "postal_code" varchar NOT NULL,
  "country" varchar NOT NULL,
  "phone" varchar NOT NULL,
  -- "phone" varchar NOT NULL CHECK (phone ~ '^[+]?[0-9\s\-\(\)]+$'),
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp)
);

CREATE TABLE "currency" (
  "currency_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "currency_code" varchar(3) NOT NULL,
  -- "currency_code" varchar(3) NOT NULL CHECK (LENGTH(currency_code) = 3 AND currency_code ~ '^[A-Z]{3}$'),
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp)
);

CREATE TABLE "design" (
  "design_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp),
  "design_name" varchar NOT NULL,
  "file_location" varchar NOT NULL,
  "file_name" varchar NOT NULL
);

CREATE TABLE "counterparty" (
  "counterparty_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "counterparty_legal_name" varchar NOT NULL,
  "legal_address_id" int NOT NULL REFERENCES "address" ("address_id"),
  "commercial_contact" varchar,
  "delivery_contact" varchar,
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp)
);

CREATE TABLE "staff" (
  "staff_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "first_name" varchar NOT NULL,
  "last_name" varchar NOT NULL,
  "department_id" int NOT NULL REFERENCES "department" ("department_id"),
  "email_address" varchar NOT NULL,
  -- "email_address" varchar NOT NULL CHECK (email_address ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp)
);

CREATE TABLE "sales_order" (
  "sales_order_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp),
  "design_id" int NOT NULL REFERENCES "design" ("design_id"),
  "staff_id" int NOT NULL REFERENCES "staff" ("staff_id"),
  "counterparty_id" int NOT NULL REFERENCES "counterparty" ("counterparty_id"),
  -- "units_sold" int NOT NULL CHECK (units_sold >= 1000 AND units_sold <= 100000),
  "units_sold" int NOT NULL,
  "unit_price" numeric NOT NULL,
  -- "unit_price" numeric NOT NULL CHECK (unit_price >= 2.00 AND unit_price <= 4.00),
  "currency_id" int NOT NULL REFERENCES "currency" ("currency_id"),
  "agreed_delivery_date" date NOT NULL,
  "agreed_payment_date" date NOT NULL,
  "agreed_delivery_location_id" int NOT NULL REFERENCES "address" ("address_id")
);

CREATE TABLE "purchase_order" (
  "purchase_order_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp),
  "staff_id" int NOT NULL REFERENCES "staff" ("staff_id"),
  "counterparty_id" int NOT NULL REFERENCES "counterparty" ("counterparty_id"),
  "item_code" varchar NOT NULL,
  "item_quantity" int NOT NULL,
  -- "item_quantity" int NOT NULL CHECK (item_quantity >= 1 AND item_quantity <= 1000),
  "item_unit_price" numeric NOT NULL,
  -- "item_unit_price" numeric NOT NULL CHECK (item_unit_price >= 3 AND item_unit_price <= 1000),
  "currency_id" int NOT NULL REFERENCES "currency" ("currency_id"),
  "agreed_delivery_date" date NOT NULL,
  "agreed_payment_date" date NOT NULL,
  "agreed_delivery_location_id" int NOT NULL REFERENCES "address" ("address_id")
);

CREATE TABLE "payment_type" (
  "payment_type_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "payment_type_name" varchar NOT NULL CHECK (payment_type_name IN ('SALES_RECEIPT', 'SALES_REFUND', 'PURCHASE_PAYMENT', 'PURCHASE_REFUND')),
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp)
);

CREATE TABLE "transaction" (
  "transaction_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "transaction_type" varchar NOT NULL CHECK (transaction_type IN ('SALE', 'PURCHASE')),
  "sales_order_id" int REFERENCES "sales_order" ("sales_order_id"),
  "purchase_order_id" int REFERENCES "purchase_order" ("purchase_order_id"),
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp),
  -- Ensure transaction type matches the order type
  CONSTRAINT transaction_type_consistency CHECK (
    (transaction_type = 'SALE' AND sales_order_id IS NOT NULL AND purchase_order_id IS NULL) OR
    (transaction_type = 'PURCHASE' AND purchase_order_id IS NOT NULL AND sales_order_id IS NULL)
  )
);

CREATE TABLE "payment" (
  "payment_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT (current_timestamp),
  "last_updated" timestamp NOT NULL DEFAULT (current_timestamp),
  "transaction_id" int NOT NULL REFERENCES "transaction" ("transaction_id"),
  "counterparty_id" int NOT NULL REFERENCES "counterparty" ("counterparty_id"),
  "payment_amount" numeric NOT NULL,
  "currency_id" int NOT NULL REFERENCES "currency" ("currency_id"),
  "payment_type_id" int NOT NULL REFERENCES "payment_type" ("payment_type_id"),
  "paid" boolean NOT NULL,
  "payment_date" date NOT NULL,
  "company_ac_number" int NOT NULL,
  -- "company_ac_number" int NOT NULL CHECK (company_ac_number >= 10000000 AND company_ac_number <= 99999999),
  "counterparty_ac_number" int NOT NULL
  -- "counterparty_ac_number" int NOT NULL CHECK (counterparty_ac_number >= 10000000 AND counterparty_ac_number <= 99999999)
);
